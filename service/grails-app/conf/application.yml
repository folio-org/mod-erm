---
grails:
  profile: rest-api
  codegen:
    defaultPackage: org.olf
  gorm:
    reactor:
      # Whether to translate GORM events into Reactor events
      # Disabled by default for performance reasons
      events: false
info:
  app:
    name: '@info.app.name@'
    version: '@info.app.version@'
    grailsVersion: '@info.app.grailsVersion@'
spring:
  jmx:
    unique-names: true
  main:
    banner-mode: "off"
  groovy:
    template:
      check-template-location: false
  devtools:
    restart:
      additional-exclude:
        - '*.gsp'
        - '**/*.gsp'
        - '*.gson'
        - '**/*.gson'
        - 'logback.groovy'
        - '*.properties'
---
grails:
  mime:
    disable:
      accept:
        header:
          userAgents:
            - Gecko
            - WebKit
            - Presto
            - Trident
    types:
      json:
       - application/json
       - text/json
      hal:
       - application/hal+json
       - application/hal+xml
      xml:
       - text/xml
       - application/xml
      atom: application/atom+xml
      css: text/css
      csv: text/csv
      js: text/javascript
      rss: application/rss+xml
      text: text/plain
      all: '*/*'
  urlmapping:
    cache:
      maxsize: 1000
  controllers:
    defaultScope: singleton
  converters:
    encoding: UTF-8

---
#### Place _ALL_ app specifics here. Makes it easier to migrate. ####

# Datasource used by default.
dataSource:
#  logSql: true
  pooled: true
  jmxExport: false
  dbCreate: none
  username: "${db.username:folio}"
  password: "${db.password:folio}"
  driverClassName: org.postgresql.Driver
  dialect: com.k_int.hibernate.dialects.postgres.KIPostgres94Dialect
  url: "jdbc:postgresql://${db.host:localhost}:${db.port:5432}/${db.database:olfdev}"
  schemaHandler: com.k_int.okapi.OkapiSchemaHandler

  properties:
    initialSize: 5
    maxActive: ${db.maxpoolsize:5}
    minIdle: 5
    maxIdle: 10
    maxWait: 10000
    maxAge: 600000
    timeBetweenEvictionRunsMillis: 5000
    minEvictableIdleTimeMillis: 60000
    validationQuery: SELECT 1
    validationInterval: 30000
    testOnBorrow: true
    testWhileIdle: true
    testOnReturn: false
    removeAbandoned: true
    removeAbandonedTimeout: 60
    abandonWhenPercentageFull: 50
    jdbcInterceptors: ConnectionState
    defaultTransactionIsolation: 2 # TRANSACTION_READ_COMMITTED

grails:
  mime:
    types:
      kbart: 'text/tab-separated-value;charset=UTF-8'  # KBART mime type.
  controllers:
    upload:
      maxFileSize: 209715200
      maxRequestSize: 220200960

  gorm:
    multiTenancy:
      mode: SCHEMA
      tenantResolverClass: com.k_int.okapi.OkapiTenantResolver  # From grails-okapi plugin.

  plugin:
    springsecurity:
      providerNames:
        - 'okapiAuthenticationProvider'   # From grails-okapi plugin.

      controllerAnnotations:
        staticRules:
          -
            pattern: '/okapi/**'
            access:
              - 'permitAll' # Should maybe lock this down to the Super tenant once it is properly enforced?
          -
            pattern: '/application/**'
            access:
              - 'permitAll'
          -
            pattern: '/**'
            access:
              - 'permitAll'
        filterChain:
          chainMap:
            -
              pattern: '/**'
              filters: 'JOINED_FILTERS,-securityContextPersistenceFilter,-rememberMeAuthenticationFilter,-basicAuthenticationFilter'
  databinding:
    dateFormats:
      - "yyyy-MM-dd'T'HH:mm:ssX"
      - "yyyy-MM-dd'T'HH:mm:ss.SSSX"
      - "yyyy-MM-dd'T'HH:mm:ss'Z'"
      - "yyyy-MM-dd'T'HH:mm:ss.SSS'Z'"
      - "yyyy-MM-dd'T'HH:mm:ss"
      - "yyyy-MM-dd'T'HH:mm:ss.SSS"
      - 'yyyy-MM-dd'

  views:
    json:
      generator:
        timeZone: "UTC"
        dateFormat: "yyyy-MM-dd'T'HH:mm:ssX"

hibernate:
 # format_sql: true
  cache:
    queries: false
    use_second_level_cache: false
    use_query_cache: false

  allow_update_outside_transaction: true #TODO: We should remove this in the near future and fix all dependants to wrap transactions.

management:
  endpoints:
    enabled-by-default: false
    web:
      base-path: '/admin'
      exposure:
        include:
          - health
          - info
  endpoint:
    info:
      enabled: true
    health:
      enabled: true
      
  health:
     datasource:
        enabled: true
     defaults:
        enabled: false

okapi:
  linkListener:
    allowedControllerActions:
      subscriptionAgreement:
        - show
        - update
        - save
        - create
        - publicLookup
        - export


  schema:
    appName: 'mod-agreements'
  service:
    register: false
    deploy: false

webtoolkit:
  converters:
    numbers:
      fixedLocale: true # Can be a boolean for default locale or an IETF BCP 47 language string

# Environment specific overrides.
environments:
  test:
    dataSource:
      url: "jdbc:postgresql://${db.host:localhost}:${db.port:5432}/${db.database:olftest}"

  dbGen:
    grails:
      gorm:
        multiTenancy:
          mode: SCHEMA
          tenantResolverClass: org.grails.datastore.mapping.multitenancy.resolvers.SystemPropertyTenantResolver # System prop of gorm.tenantId
      plugin:
        databasemigration:
          changelogFileName: module-tenant-changelog.groovy
    gorm:
      tenantId: public # Used by SystemPropertyTenantResolver

  production:
    dataSource:
      url: "jdbc:postgresql://${db.host:localhost}:${db.port:5432}/${db.database:olf}"

  development:
    logging:
      level:
        web: DEBUG
    # This is only used when the there is no request from okapi coming to the module or a none-okapi request.
    # OKAPI supplies information about how to reach it to the modules. These options are used for self reg and other calls
    # when the request did not come through OKAPI.
    okapi:
      service:
        host: localhost
        port: 9130
---
events:
  # consumer:
  #   zk:
  #     connect: 'localhost:2181'
  #   bootstrap:
  #     servers: 'localhost:29092'
  #   key:
  #     deserializer: org.apache.kafka.common.serialization.StringDeserializer
  #   value:
  #     deserializer: org.apache.kafka.common.serialization.StringDeserializer
  #   # group:
  #   #   id: GroupConsumerId
  #   'auto.offset.reset': 'earliest'
  publisher:
    zk:
      connect: 'localhost:2181'
    bootstrap:
      servers: 'localhost:29092'
    key:
      serializer: org.apache.kafka.common.serialization.StringSerializer
    value:
      serializer: org.apache.kafka.common.serialization.StringSerializer

